@using System.Text;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Mvc.Razor;

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Map</title>

    <style>
    
        .browser{
            overflow-y:auto;
            max-height:100vh;
        }

        .rating-number {
            margin-left: 5px; /* Add some space between stars and rating number */
        }

        .nav-button {
            border-radius: 5px; /* Optional for rounded corners */
        }
        .search-form {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
    }

    .search-form select, .search-form input[type="text"], .search-form button {
        margin-right: 10px;
        padding: 10px;
        font-size: 1em;
        font-weight: normal;
        height: 50px; /* Set a uniform height */
        width: 200px; /* Set a uniform width */
    }

    .search-form button {
        background-color: #333;
        color: white;
        border: none;
        cursor: pointer;
    }

label {
    margin-right: 10px;
    font-size: 1em;
}

       
        /* CSS for the star rating */
        .star-rating-container {
            display: flex;
            align-items: center;
        }

        .star {
            font-size: medium; /* Adjust the font size as needed */
            width: auto; /* Remove fixed width */
            margin-right: 0; /* Remove margin between stars */
            display: inline-block; /* Display stars as blocks */
            color: gray;
        }

            .star:last-child {
                margin-right: 0; /* Ensure no margin after the last star */
            }

            .star.on:before {
                content: '\2605'; /* Use a filled star character for 'star on' class */
                color: gold;
            }

            .star.half:before {
                content: '\2605'; /* Use a filled star character for 'star half' class */
                color: gold;
            }

        .rating-number {
            margin-left: 5px; /* Adjust the margin as needed */
        }


       

        

        /* CSS for the information box container */
        .info-box-container {
            display: flex;
            flex-direction: row; /* Arrange children in a row */
            overflow-x: auto; /* Enable horizontal scrolling */
            overflow-y: hidden; /* Disable vertical scrolling */
            white-space: nowrap; /* Prevent elements from wrapping to the next line */
            width: 100%; /* Container takes up full width of its parent */
            max-height: 700px; /* Adjust this as needed */
        }

        /* CSS for each information box (location button) */
        .info-box {
            display: inline-flex; /* Inline flex to display horizontally */
            flex-direction: column; /* Content of the box is arranged vertically */
            align-items: flex-start;
            justify-content: space-between;
            padding: 10px;
            min-width: 500px; /* Minimum width of each box */
            margin-right: 10px; /* Space between the boxes */
            height: 180px;
            background-color: #333; /* Dark background color */
            color: white;
            border-radius: 10px; /* Rounded corners */
            padding: 10px; /* Smaller padding inside the box */
            width: 100%; /* Take full width of the container */
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); /* Box shadow for depth */
            transition: background-color 0.3s; /* Smooth background color transition on hover */
            text-align: left; /* Align text to the left */
            position: relative; /* Position relative for absolute positioning of children */
            margin-bottom: 15px; /* Space between the boxes */
        }


        .info-box-content h4 {
            font-size: 20px; /* Smaller font size for the name */
            color: #FFD700; /* Yellow color for the name */
            margin: 0; /* Reset margin for h4 */
        }

        .info-box-content > p {
            margin: 5px 0; /* Uniform margin for all paragraphs */
            font-size: 14px; /* Smaller font size for details */
        }

            .info-box-content > p:not(.hours) {
                font-weight: normal; /* Normal font weight */
            }

        .info-box-content p:not(.hours) {
            font-size: 12px; /* Smaller font size */
        }

        .info-box-content p:last-child,
        .info-box-content .hours {
            position: absolute;
            bottom: 10px; /* Reduced space at the bottom */
            font-size: 14px; /* Smaller font size */
        }

        .info-box p {
            font-size: 1em; /* Standard font size for details */
            margin: 0.5em 0; /* Vertical space between details */
        }

        .info-box-content p:last-child {
            right: 10px; /* Reduced space on the right for rating */
        }

        .info-box-content .hours {
            left: 10px; /* Reduced space on the left for hours */
        }

        .info-box:hover {
            font-size: 1.2em; /* Slightly larger font size for the name on hover */
            color: #FFD700; /* Yellow color for the name */
            margin-bottom: 0.5em; /* Reduced space below the name on hover */
            font-weight: bold; /* Bold font weight on hover */
        }

        .info-box p {
            font-size: 1em; /* Standard font size for details */
            margin: 0.5em 0; /* Vertical space between details */
        }

        /* CSS for the map */
        .map-container {
            float: right;
            width: 100%; /* Made the map wider */
        }

        .map {
            width: 100%;
            height: 450px;
            border: 0;
        }

        /* CSS for the hours */
        .hours {
            font-size: 10px; /* Smaller font size for hours */
        }

        /* CSS for the AM and PM */
        .am-pm {
            font-size: 8px; /* Smaller font size for AM and PM */
        }

        .info-box-content p.hours {
            margin-bottom: 0; /* Remove bottom margin for hours */
            font-size: 12px; /* Adjust font size for hours */
        }

        .info-box-content p.phone-number {
            margin-top: -5px; /* Reduce top margin for phone number */
        }
    </style>

  
</head>
<body>
   
    <!-- Top bar -->
        <div class="search-form">
            <form method="post" action="/GoogleMap/Search">
                <select id="courtType" name="courtType" >
                    <option value="tennis"><strong>Tennis Court</strong></option>
                    <option value="basketball"><strong>Basketball Court</strong></option>
                    <option value="volleyball"><strong>Volleyball Court</strong></option>
                    <option value="baseball"><strong>Baseball Field</strong></option>
                    <option value="soccer"><strong>Soccer Field</strong></option>
                </select>
                <label for="zipcode">Zipcode:</label>
                <input type="text" name="zipcode" value="@ViewBag.Zipcode" required />
                <button type="submit"><strong>Search</strong></button>
            </form>
        </div>
    

    <div class="browser">
        <!-- Map container -->
        <div class="map-container">
            <iframe class="map"
                    loading="lazy"
                    allowfullscreen
                    referrerpolicy="no-referrer-when-downgrade"
                    src="@ViewBag.MapUrl">
            </iframe>
        </div>

        <!-- Information boxes -->
        <div class="info-box-container">
            @if (ViewBag.Places != null && ViewBag.Places.Count > 0)
            {
                var displayCount = Math.Min(15, ViewBag.Places.Count);
                for (int i = 0; i < displayCount; i++)
                {
                    var place = ViewBag.Places[i];
                    <button class="info-box" id="@($"infoBoxButton_{i}")">
                        <div class="info-box-content">
                            <h4>@place.Name</h4>
                            <p><strong>Address:</strong> @place.FormattedAddress</p>
                            <p>
                             <strong>Distance:</strong>
                             @{
                             var distanceDisplay = place.Distance < 0.1 ? $"{Math.Round(place.Distance * 5280)} feet" : $"{place.Distance} miles";
                             }
                             @distanceDisplay
                             </p>
                            <p><strong>Phone Number:</strong> @place.FormattedPhoneNumber</p>
                            <div class="rating">
                                @RenderStarRating(place.Rating)
                            </div>
                            @if (place.OpeningHours != null && place.OpeningHours.weekday_text != null)
                            {
                                <p class="hours">
                                    @DisplayGroupedHours(place.OpeningHours.weekday_text)
                                </p>
                            }
                            else
                            {
                                <p class="hours">
                                    Hours not available.
                                </p>
                            }
                        </div>
                    </button>
                }
            }
            else
            {
                <!-- Hide "No courts found" when the page loads -->
            }
        </div>
    </div>

    @functions {
                            @functions {
            private string DisplayGroupedHours(List<string> weekdayHours)
            {
                var daysOfWeek = new List<string> { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
                var hoursByDay = weekdayHours.Select(dayHour => dayHour.Split(new[] { ": " }, StringSplitOptions.None))
                .ToDictionary(split => split[0], split => split[1]);

                string currentGroupStartDay = null, lastHours = null;
                var groupedHours = new List<string>();

                foreach (var day in daysOfWeek)
                {
                    hoursByDay.TryGetValue(day, out var currentHours);
                    if (currentHours == lastHours)
                    {
                        continue;
                    }

                    if (currentGroupStartDay != null)
                    {
                        var previousDayIndex = daysOfWeek.IndexOf(day) - 1;
                        var groupEndDay = daysOfWeek[previousDayIndex];
                        var formattedHours = currentGroupStartDay == groupEndDay ?
                        $"{currentGroupStartDay}: {lastHours}" :
                        $"{currentGroupStartDay}-{groupEndDay}: {lastHours}";
                        groupedHours.Add(formattedHours);
                    }

                    currentGroupStartDay = day;
                    lastHours = currentHours;
                }

                // Handle the last group
                if (currentGroupStartDay != null && lastHours != null)
                {
                    var formattedHours = currentGroupStartDay == daysOfWeek.Last() ?
                    $"{currentGroupStartDay}: {lastHours}" :
                    $"{currentGroupStartDay}-{daysOfWeek.Last()}: {lastHours}";
                    groupedHours.Add(formattedHours);
                }

                return string.Join("\n", groupedHours);
            }
                            }
        public IHtmlContent RenderStarRating(double rating)
{
    int fullStars = (int)Math.Floor(rating); // Number of full stars
    double fractionalPart = rating - fullStars; // Fractional part of the rating

    var stars = new StringBuilder();

    for (int i = 0; i < fullStars; i++)
    {
        // Use a full star element with the 'star on' class
        stars.Append("<span class=\"star on\"></span>");
    }

    if (fractionalPart >= 0.1)
    {
        // Use a half star element with the 'star half' class
        stars.Append("<span class=\"star half\"></span>");
    }

    return new HtmlString(
        $"<div class=\"star-rating-container\">{stars.ToString()}<span class=\"rating-number\">{rating}</span></div>"
    );
}



    }

    <script src="~/js/Event/EventUtility.js" asp-append-version="true"></script>
    
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var places = @Html.Raw(Json.Serialize(ViewBag.Places));
            var noCourtsMessage = document.querySelector(".no-courts-message");
     

        });

    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            localStorage.removeItem('EventLocationInfo');
            // Attach click event listeners to each info box button
            @if (ViewBag.Places != null && ViewBag.Places.Count > 0)
            {
                var displayCount = Math.Min(15, ViewBag.Places.Count);
                for (int i = 0; i < displayCount; i++)
                {
                    <text>
                            document.getElementById('infoBoxButton_@i').addEventListener('click', function () {
                            handleInfoBoxClick('@ViewBag.Places[i].PlaceId', '@ViewData["CourtType"]');
                            });
                    </text>
                }
            }
        });


        async function handleInfoBoxClick(locationAddress, courtType) {
            console.log('Info box clicked for place:', locationAddress);
            console.log('SportName', courtType);
            // get the sportName
            var EventLocationInfo = await GetEventsByLocationName(locationAddress, courtType);
            console.log(JSON.stringify(EventLocationInfo));
            // store information to local storage
            localStorage.setItem('EventLocationInfo', JSON.stringify(EventLocationInfo));
            window.location.href = ('/EventSpecification/GymDetail');
        }

        async function GetEventsByLocationName(PlaceId, SportName) {
            try {
                const response = await fetch(`/api/${PlaceId}/${SportName}/GetEventsByLocationName`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log("GET by using locationName", JSON.stringify(data));
                return data;
            } catch (error) {
                console.error('Failed to fetch events:', error);
            }
            var SportName = 'tennis';
        }

      
    </script>
   
</body>
</html>
