@using System.Text;
@using Microsoft.AspNetCore.Html;
@using Microsoft.AspNetCore.Mvc.Razor;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor
@using System.Text.Json

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Map</title>

    <style>

        /* style for the page and contains, the searrch button and any labels */
        
        .browser {
            overflow-y: auto;
            max-height: 100vh;
        }

        .rating-number {
            margin-left: 5px; 
        }

        .nav-button {
            border-radius: 5px; 
        }

        .search-form {
            display: flex;
            align-items: center;
            justify-content: center;
            margin-top: 20px;
        }

            .search-form select, .search-form input[type="text"], .search-form button {
                margin-right: 10px;
                padding: 10px;
                font-size: 1em;
                font-weight: normal;
                height: 50px; 
                width: 200px; 
            }

            .search-form button {
                background-color: #333;
                color: white;
                border: none;
                cursor: pointer;
            }

        label {
            margin-right: 10px;
            font-size: 1em;
        }




        /* style information box container */
        .info-box-container {
            display: flex;
            flex-direction: row; 
            overflow-x: auto;
            overflow-y: hidden; 
            white-space: nowrap;
            width: 100%;
            max-height: 700px; 
        }

        /*  information box (location button) */
        .info-box {
            display: inline-flex; 
            flex-direction: column; 
            align-items: flex-start;
            justify-content: space-between;
            padding: 10px;
            min-width: 500px; 
            margin-right: 10px;
            height: 180px;
            background-color: #333;
            color: white;
            border-radius: 10px;
            padding: 10px; 
            width: 100%; 
            box-shadow: 0 4px 8px rgba(0,0,0,0.2); 
            transition: background-color 0.3s; 
            text-align: left; 
            position: relative; 
            margin-bottom: 15px; 
        }


        .info-box-content h4 {
            font-size: 20px; 
            color: #FFD700; 
            margin: 0; 
        }

        .info-box-content > p {
            margin: 5px 0; 
            font-size: 14px; 
        }

            .info-box-content > p:not(.hours) {
                font-weight: normal; 
            }

        .info-box-content p:not(.hours) {
            font-size: 12px;
        }

        .info-box-content p:last-child,
        .info-box-content .hours {
            position: absolute;
            bottom: 10px; 
            font-size: 14px; 
        }

        .info-box p {
            font-size: 1em; 
            margin: 0.5em 0; 
        }

        .info-box-content p:last-child {
            right: 10px; 
        }

        .info-box-content .hours {
            left: 10px; 
        }

        .info-box:hover {
            font-size: 1.2em; 
            color: #FFD700;
            margin-bottom: 0.5em; 
            font-weight: bold;
        }

        .info-box p {
            font-size: 1em; 
            margin: 0.5em 0; 
        }

        /* CSS for the map */
        .map-container {
            float: right;
            width: 100%; 
        }

        .map {
            width: 100%;
            height: 450px;
            border: 0;
        }

        /*  hours */
        .hours {
            font-size: 10px; /* Smaller font size for hours */
        }

        /*  AM and PM */
        .am-pm {
            font-size: 8px; /* Smaller font size for AM and PM */
        }

        .info-box-content p.hours {
            margin-bottom: 0;
            font-size: 12px; 
        }

        .info-box-content p.phone-number {
            margin-top: -5px; 
        }
    </style>


</head>

<body>

    <!-- Top bar here all the queries are being showed  and all the information for the user -->
    <div class="search-form">
        <form method="post" action="/GoogleMap/Search">
            <select id="courtType" name="courtType">
                <option value="tennis"><strong>Tennis Court</strong></option>
                <option value="basketball"><strong>Basketball Court</strong></option>
                <option value="volleyball"><strong>Volleyball Court</strong></option>
                <option value="baseball"><strong>Baseball Field</strong></option>
                <option value="soccer"><strong>Soccer Field</strong></option>
            </select>
            <label for="zipcode">Zipcode:</label>
            <input type="text" name="zipcode" value="@ViewBag.Zipcode" required />
            <button type="submit"><strong>Search</strong></button>
        </form>
    </div>


    <div class="browser">
        <!-- Map container -->
        <div class="map-container">
            <iframe class="map"
                    loading="lazy"
                    allowfullscreen
                    referrerpolicy="no-referrer-when-downgrade"
                    src="@ViewBag.MapUrl">
            </iframe>
        </div>

        <!-- Information boxes, this where all the infromation from the api showed -->
        <div class="info-box-container">
            @if (ViewBag.Places != null && ViewBag.Places.Count > 0)
            {
                var displayCount = Math.Min(15, ViewBag.Places.Count);
                for (int i = 0; i < displayCount; i++)
                {
                    var place = ViewBag.Places[i];
                    <button class="info-box" id="@($"infoBoxButton_{i}")">
                        <div class="info-box-content">
                            <h4>@place.Name</h4>
                            <p><strong>Address:</strong> @place.FormattedAddress</p>
                            <p>
                                <strong>Distance:</strong>
                                @{
                                    <!-- rounding to make the values precise and pretty -->
                                    var distanceDisplay = place.Distance < 0.1 ? $"{Math.Round(place.Distance * 5280)} feet" : $"{place.Distance} miles";
                                }
                                @distanceDisplay
                            </p>
                            <p><strong>Phone Number:</strong> @place.FormattedPhoneNumber</p>
                            <p><strong>Rating:</strong> @place.Rating</p>
                            @if (place.OpeningHours != null && place.OpeningHours.weekday_text != null)
                            {
                                <!-- grouping same days and hour together so it looks pretty and doesn't overflow -->
                                <p class="hours">
                                    @DisplayGroupedHours(place.OpeningHours.weekday_text)
                                </p>
                            }
                            else
                            {
                                <p class="hours">
                                    Hours not available.
                                </p>
                            }
                        </div>
                    </button>
                }
            }
            else
            {
                <!-- Hide "No courts found" when the page loads -->
            }
        </div>
    </div>

    @functions {
        //function to arrange the days and in good format 
            // so if it is monday 8 am , and wednesday 8 am it looks like monday,wednesday 8 am
           
        private string DisplayGroupedHours(List<string> weekdayHours)
        {
            var daysOfWeek = new List<string> { "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday" };
            var hoursByDay = weekdayHours.Select(dayHour => dayHour.Split(new[] { ": " }, StringSplitOptions.None))
            .ToDictionary(split => split[0], split => split[1]);

            string currentGroupStartDay = null, lastHours = null;
            var groupedHours = new List<string>();
            // 
            foreach (var day in daysOfWeek)
            {
                hoursByDay.TryGetValue(day, out var currentHours);
                if (currentHours == lastHours)
                {
                    continue;
                }

                if (currentGroupStartDay != null)
                {
                    var previousDayIndex = daysOfWeek.IndexOf(day) - 1;
                    var groupEndDay = daysOfWeek[previousDayIndex];
                    var formattedHours = currentGroupStartDay == groupEndDay ?
                    $"{currentGroupStartDay}: {lastHours}" :
                    $"{currentGroupStartDay}-{groupEndDay}: {lastHours}";
                    groupedHours.Add(formattedHours);
                }

                currentGroupStartDay = day;
                lastHours = currentHours;
            }

          
            if (currentGroupStartDay != null && lastHours != null)
            {
                var formattedHours = currentGroupStartDay == daysOfWeek.Last() ?
                $"{currentGroupStartDay}: {lastHours}" :
                $"{currentGroupStartDay}-{daysOfWeek.Last()}: {lastHours}";
                groupedHours.Add(formattedHours);
            }

            return string.Join("\n", groupedHours);
        }




    }
    <script src="~/js/UserUtility.js" asp-append-version="true"></script>
    <script src="~/js/Event/EventUtility.js" asp-append-version="true"></script>

    <script>
        // storing user info to the local storage
        // ez as 12345
        document.addEventListener("DOMContentLoaded", async function () {
            var places = @Html.Raw(Json.Serialize(ViewBag.Places));
            var noCourtsMessage = document.querySelector(".no-courts-message");

            // 1: getUserInfo is a async function that return user info stored in db
            var user = await getUserInfo();
            console.log('User Information:', JSON.stringify(user));
            // 4. use user id (primary key) to ket the user info (including all events that are associated with this user)
            var UserInfo = await GetUserInfo(user.userId);
            // 5. store this information to local storage so that we can access user info for the rest of the pages
            localStorage.setItem('userInfo', JSON.stringify(UserInfo));

            async function getUserInfo() {
                // 2. first it retrieve user email from session (this information is stored in OAuthController after user logged in)
                var userEmailSession = '@HttpContextAccessor.HttpContext.Session.GetString("UserEmailSession")';
                console.log('User Email from Session:', userEmailSession);

                try {
                    // 3. we use email to get user by calling a function written in js that send a request to backend
                    var user = await GetUserByEmail(userEmailSession);
                    return user;
                } catch (error) {
                    console.error('Error fetching user information:', error);
                }
            }

        });


    </script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            localStorage.removeItem('EventLocationInfo');
            // connection google map page to location specification page
            // ez as 123
            @if (ViewBag.Places != null && ViewBag.Places.Count > 0)
        {
            // 1. for each location displayed after a user input zipcode and click search, we add a eventlistener that passes placeid and sporttype
            // **note:placeid is the unique identifier for the location that google map returned, and locationid is the primary key for the location table
            var displayCount = Math.Min(15, ViewBag.Places.Count);
            for (int i = 0; i < displayCount; i++)
            {
                <text>
                        document.getElementById('infoBoxButton_@i').addEventListener('click', function () {
                            // 2. when the user clicked a certain locaiton, handleInfoBoxClick method is called
                            handleInfoBoxClick('@ViewBag.Places[i].PlaceId', '@ViewData["CourtType"]');
                        });
                </text>
            }
        }
                });


        async function handleInfoBoxClick(locationAddress, courtType) {
            console.log('Info box clicked for place:', locationAddress);
            console.log('SportName', courtType);
            // 3. get all event that are associated with this location and stored this info to the local storage
            var EventLocationInfo = await GetEventsByLocationName(locationAddress, courtType);
            console.log(JSON.stringify(EventLocationInfo));
            localStorage.setItem('EventLocationInfo', JSON.stringify(EventLocationInfo));
            window.location.href = ('/EventSpecification/GymDetail');
        }

        async function GetEventsByLocationName(PlaceId, SportName) {
            // a function that send request to backend (defined inside Controller/EventSpecification/EventUtility.cs)
            try {
                const response = await fetch(`/api/${PlaceId}/${SportName}/GetEventsByLocationName`);
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                const data = await response.json();
                console.log("GET by using locationName", JSON.stringify(data));
                return data;
            } catch (error) {
                console.error('Failed to fetch events:', error);
            }
            var SportName = 'tennis';
        }


    </script>

</body>
</html>
